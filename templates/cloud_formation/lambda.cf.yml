---
Description: Example API Gateway with Lambda as backend
Parameters:
  S3Stack:
    Type: String
    Description: S3 Bucket
  S3Key:
    Type: String
    Description: S3 Key
  MemorySize:
    Type: String
    Description: Lambda memory size
    Default: 128
  Runtime:
    Type: String
    Default: go1.x
  Version:
    Type: String

Resources:

  LambaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyDocument:
          Statement:
            - Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Effect: Allow
              Resource:
                - arn:aws:logs:*:*:*
            - Action:
                - "dynamodb:DeleteItem"
                - "dynamodb:GetItem"
                - "dynamodb:PutItem"
                - "dynamodb:Query"
                - "dynamodb:Scan"
                - "dynamodb:UpdateItem"
              Effect: Allow
              Resource:
                - Fn::Join:
                    - ''
                    - - "arn:aws:dynamodb:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - ":"
                      - "table/"
                      - "{{aws_lambda.lambda.stack_name}}*"
{% if aws_lambda.lambda.dynamodb is defined %}
                - Fn::Join:
                    - ''
                    - - "arn:aws:dynamodb:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - ":"
                      - ":table/"
                      - "{{aws_lambda.lambda.dynamodb}}"
{% endif %}
        PolicyName: LambdaPolicy
    Type: AWS::IAM::Role

  Lambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambaRole
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub "${S3Stack}-BucketName"
        S3Key:
          Ref: S3Key
      Handler: main
      MemorySize:
        Ref: MemorySize
      Role:
        Fn::GetAtt:
        - LambaRole
        - Arn
      Runtime:
        Ref: Runtime
      Timeout: 30
{% if aws_lambda.lambda.variables %}
      Environment:
        Variables:
{% for item in aws_lambda.lambda.variables %}
          {{item}}_{{env}}: {{ self._TemplateReference__context.resolve(item)}}
{% endfor %}
{% endif %}

Outputs:
  Lambda:
    Description: lambda
    Value:
      !Ref Lambda
    Export:
      Name:
          Fn::Sub: "${AWS::StackName}-lambda"

  LambdaArn:
    Description: lambdaArn
    Value:
      Fn::GetAtt:
        - Lambda
        - Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-lambdaArn"

