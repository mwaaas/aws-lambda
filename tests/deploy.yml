---
- hosts: all
  connection: local
  gather_facts: no
  vars_files:
    - ./group_vars/all.yml
    - ./group_vars/{{ env }}.yml

  tasks:
     - name: zip app
       shell: "zip -j {{src_code}} ./app/dist/main"

     - name: tesing aws-lambda role
       include_role:
        name: mwaaas.aws-lambda
       vars:
         aws_lambda:
          dynamodb:
            stack_name: "{{ stack_name_env }}-dynamodb"
            stack_properties:
              TableName: "{{DynamoDbTableName}}"
              AttributeDefinitions:
                -
                  AttributeName: "ISBN"
                  AttributeType: "S"
              KeySchema:
                -
                  AttributeName: "ISBN"
                  KeyType: "HASH"
              ProvisionedThroughput:
                ReadCapacityUnits: "5"
                WriteCapacityUnits: "5"
            template_parameters: {}
          s3:
            stack_name: "{{ s3_stack_name }}"
            stack_properties: {}
          lambda:
            stack_name: "{{ stack_name }}"
            stack_properties: {}
            variables:
              - DynamoDbTableName
            template_parameters:
              Runtime: go1.x
              MemorySize: 128
              S3Stack: "{{ s3_stack_name }}"
              Version: "{{app_version}}"
              S3Key: "{{ src_code }}"
          gateway:
            stack_name: "{{ stack_name_gateway }}"
            stack_properties: {}
            template_parameters:
              RestApiName: "{{ stack_name }}-gateway"
              LambdaStack: "{{ stack_name }}"
              CertificateArn: "arn:aws:acm:eu-west-1:354955808555:certificate/41ea1a51-777a-4bdb-ad6e-787ad254ccd8"
              DomainName: "test-lambda.tumacredo.com"




     - name: Test lambda has been created and works post method
       uri:
        url: "{{ Stack[stack_name_gateway]['stack_outputs']['RootUrl']}}/{{env}}/{{stack_name_gateway}}"
        method: POST
        status_code: 201
        body_format: json
        body: "{{ lookup('file','body.json') }}"
       ignore_errors: yes
       register: testing_endpoint

     - name:  Fail if the response failed
       fail:
         msg: "{{ testing_endpoint.msg }}"
       when: testing_endpoint.failed


     - name: Test lambda has been created and works get
       uri:
        url: "{{ Stack[stack_name_gateway]['stack_outputs']['RootUrl']}}/{{env}}/{{stack_name_gateway}}?isbn=978-0141439587"
        method: GET
        status_code: 200
       ignore_errors: yes
       register: testing_endpoint

     - name:  Fail if the response failed
       fail:
         msg: "{{ testing_endpoint.msg }}"
       when: testing_endpoint.failed
       # deleting created stacks if we are in testing mode
     - block:
       - name: Delete a bucket and all contents
         aws_s3:
          bucket: "{{Stack[s3_stack_name]['stack_outputs']['BucketName'] }}"
          mode: delete
          profile: "{{ profile }}"
       - debug: msg="{{StackNames| reverse | list }}"
       - name: Delete stacks
         include_role:
           name: mwaaas.aws-lambda
           tasks_from: delete_stack
         with_list: "{{ StackNames | reverse | list }}"
       when: test|bool
